from aiogram import Bot, Dispatcher, executor, types
import res.markups as nav
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text

TOKEN_API = "6464996989:AAEiOYmBnlg2Bmb1eU8hKhRW1gCPrnDOy6I"
bot = Bot(token=TOKEN_API)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def help_command(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=nav.keyboard)


@dp.callback_query_handler()
async def choosingTrainingClass(callback_query: types.CallbackQuery):
    if callback_query.data == "1-4Class" or\
            callback_query.data == "5-6Class" or\
            callback_query.data == "7Class" or\
            callback_query.data == "8Class" or\
            callback_query.data == "9Class" or\
            callback_query.data == "10Class" or\
            callback_query.data == "11Class":
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await bot.send_message(
            callback_query.from_user.id,
            '–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:',
            reply_markup=nav.keydoardRepaint(callback_query.data)
        )

    elif callback_query.data in nav.SubjectsList:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_keyboard = callback_query.message.reply_markup.inline_keyboard

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å
        button_index = None

        for i, row in enumerate(current_keyboard):
            for j, button in enumerate(row):
                if button.callback_data == callback_query.data:
                    button_index = (i, j)
                    break

        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è—è —ç–º–æ–¥–∂–∏
        if button_index is not None:
            if " ‚úÖ" in current_keyboard[button_index[0]][button_index[1]].text:
                current_keyboard[button_index[0]][button_index[1]].text =\
                    callback_query.data.replace(" ‚úÖ", "")
            else:
                current_keyboard[button_index[0]][button_index[1]].text =\
                    callback_query.data + " ‚úÖ"

        if current_keyboard[-1][0].text != '–ü–û–ô–î–ï–ú –î–ê–õ–¨–®–ï ‚û°Ô∏è':
            callback_query.message.reply_markup.add(
                InlineKeyboardButton('–ü–û–ô–î–ï–ú –î–ê–õ–¨–®–ï ‚û°Ô∏è',
                                     callback_data='–î–∞–ª–µ–µ1'))
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=current_keyboard)
        )
    if callback_query.data == "–î–∞–ª–µ–µ1":
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await bot.send_message(
            callback_query.from_user.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:',
            reply_markup=nav.keyboardTimeZone
        )
    if callback_query.data in nav.TimeZonesList:
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await bot.send_message(callback_query.from_user.id,
                               "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                               reply_markup=nav.mainMenu)


@dp.message_handler(Text(equals=[
    "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéì",
    "–ú–æ–µ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è",
    "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô",
    "–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–∞ üîÑ"
    ]))
async def mainMenu(message: types.Message):
    # –°–æ–æ–±–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    if message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéì':
        await message.answer(text="–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:\n" +
                             "–ö–ª–∞—Å—Å:\n–ü—Ä–µ–¥–º–µ—Ç—ã:\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    if message.text == '–ú–æ–µ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ':
        await message.answer(text="–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    if message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await message.answer(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=nav.settingsMenu)
    if message.text == '–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–∞ üîÑ':
        await message.answer(text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô':
        await message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
