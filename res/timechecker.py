from datetime import timedelta, datetime, date
import sqlite3
from modules.markups import *
from modules.SendNotify import send_notify
from modules.config_reader import config
import asyncio
import pytz


def timetable_on_date(date: date, cursor: sqlite3.Cursor):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä—Ç–µ–∂–µ–π
    (–Ω–∞–∑–≤–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞, –ø–∞—Ä–∞–ª–ª–µ–ª—å (–æ–Ω–∞-–∂–µ –∫–ª–∞—Å—Å))"""

    return cursor.execute("""SELECT subject, start_time, end_time,
                          class FROM Timetable WHERE date=?""",
                          (date.strftime("%d.%m.%Y"), )).fetchall()


async def mornind_and_evening_notifycations(moscow_time: datetime):
    # –ß–∞—Å—ã —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏ –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    times = ["09", "17"]

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    for tz in TimeZonesList:
        # –ë–µ—Ä–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ —Å –ú—Å–∫
        delta_msk = [int(tz.split()[0][-2])][0]

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ tz
        new_time = moscow_time + timedelta(hours=delta_msk)

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ datetime -> date, time
        d = new_time.date()
        t = new_time.time().strftime("%H:%M")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤
        hour = t.split(":")[0]

        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∏—Ç –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –∏–ª–∏ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É
        if hour in times:
            # –ë–µ—Ä–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º —á–∞—Å–æ–≤—ã—ã–º –ø–æ—è—Å–æ–º
            users = cursor.execute(f"""SELECT tg_id, class
                                   FROM UsersInfo
                                   WHERE timezone=?""",
                                   (tz,)).fetchall()

            # –ï—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
            if users:
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for user in users:
                    send_text = ""

                    # –ü–æ—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    if hour == times[0]:
                        timetable = timetable_on_date(d, cursor)
                    elif hour == times[1]:
                        d += timedelta(days=1)
                        timetable = timetable_on_date(d, cursor)

                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —É—Ä–æ–∫–∏,
                    # –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    timetable = list(filter(
                        lambda x: user[1] in x[3], timetable))

                    # –ï—Å–ª–∏ —Ç–∞–∫–∏–µ —É—Ä–æ–∫–∏ –µ—Å—Ç—å
                    if timetable:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        send_text += "üìù –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " +\
                            f"{d.strftime('%d.%m.%Y')}:"

                        for event in timetable:
                            send_text += f"\n{' ' * 7}" +\
                                f"‚Ä¢–ù–∞–∑–≤–∞–Ω–∏–µ: {event[0]}"
                            send_text += "\n–í—Ä–µ–º—è: " +\
                                f"{event[1]} - {event[2]}\n"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        send_notify(TOKEN, send_text, user[0])
                        print("–û—Ç–ø—Ä–∞–≤–∫–∞")


async def checkSubjects():
    SubjListForNotification = []

    # --- --- –ú–æ—Å–∫–≤–æ—Å–∫–æ–µ –≤—Ä–µ–º—è + 15 –º–∏–Ω---
    time_now = datetime.now(pytz.timezone("Europe/Moscow")) + \
        timedelta(minutes=15).strftime("%H:%M")

    # –£—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è
    SubjListForNotification = \
        list(map(lambda x: x[0],
                 cursor.execute("""SELECT subject
                                FROM Timetable WHERE start_time=?""",
                                (time_now,)).fetchall()))

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in cursor.execute("SELECT tg_id, subjects FROM UsersInfo")\
            .fetchall():
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for subj in SubjListForNotification:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É—Ä–æ–∫
            if subj in user[1]:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                send_text = f"–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Ä–æ–∫ {user[1]}"
                send_notify(TOKEN, send_text, user[0])


async def checkTime():
    while True:
        # –í—Ä–µ–º—è —Å–µ–π—á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        current_time = datetime.now(pytz.timezone("Europe/Moscow")).time()
        # current_time = time(9, 0, 0)

        if current_time.minute == 45:
            await checkSubjects()
        elif current_time.minute == 0:
            await mornind_and_evening_notifycations(current_time)
        await asyncio.sleep(60)


async def on_startup():
    asyncio.create_task(checkTime())


# –¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
TOKEN = config.bot_token.get_secret_value()

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ë–î
conn = sqlite3.connect('res/data/EnginerSchool.db')
cursor = conn.cursor()

if __name__ == '__main__':
    print("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω...")
    loop = asyncio.get_event_loop()
    loop.create_task(checkTime())
    loop.run_forever()
