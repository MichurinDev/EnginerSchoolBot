# –ò–º–ø–æ—Ä—Ç—ã
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

import sqlite3
from datetime import datetime, timedelta
import pytz

from modules.markups import *
from modules.config_reader import config
from timechecker import timetable_on_date

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
TOKEN = config.bot_token.get_secret_value()


bot = Bot(token=TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ë–î
conn = sqlite3.connect('res/data/EnginerSchool.db')
cursor = conn.cursor()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotStates(StatesGroup):
    START_STATE = State()
    HOME_STATE = State()

    GET_CLASS_STATE = State()
    GET_OBJECTS_STATE = State()
    GET_TIMEZONE_STATE = State()


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
_temp = []
user_msg = None


WEEKDAYS = {
    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–í—Ç–æ—Ä–Ω–∏–∫",
    2: "–°—Ä–µ–¥–∞",
    3: "–ß–µ—Ç–≤–µ—Ä–≥",
    4: "–ü—è—Ç–Ω–∏—Ü–∞",
    5: "–°—É–±–±–æ—Ç–∞",
    6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    global user_msg, _temp

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª–¥—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_msg = msg

    # –ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±–æ—Ä–∫–æ–≤ –ø–æ ID
    user_by_tgID = cursor.execute(f''' SELECT class FROM UsersInfo
                                  WHERE tg_id=?''',
                                  (msg.from_user.id,)).fetchall()

    state = dp.current_state(user=msg.from_user.id)

    if user_by_tgID:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        # –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(msg.from_user.id,
                               MENU_TEXT, reply_markup=mainMenu)
        await state.set_state(BotStates.HOME_STATE.state)

    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–≤–µ—Å—Ç–∏ –∫–ª–∞—Å—Å
        await bot.send_message(
            msg.from_user.id,
            START_TEXT, reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.HTML)

        _temp = []

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞–¥–∏—é –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å–∞
        await bot.send_message(msg.from_user.id, ACQUAINTANCE_TEXT,
                               reply_markup=keyboard)
        await state.set_state(BotStates.GET_CLASS_STATE.state)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@dp.message_handler(commands=['help'])
async def help(msg: types.Message):
    await bot.send_message(msg.from_user.id, HELP_TEXT)


@dp.callback_query_handler(state=BotStates.GET_CLASS_STATE)
async def get_class(callback_query: types.CallbackQuery):
    global _temp

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å
    _temp.append(callback_query.data)

    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=None  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await bot.send_message(
        callback_query.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã üìö',
        reply_markup=keydoardRepaint(callback_query.data)
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞–¥–∏—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(BotStates.GET_OBJECTS_STATE.state)


@dp.callback_query_handler(state=BotStates.GET_OBJECTS_STATE)
async def get_objects(callback_query: types.CallbackQuery):
    global _temp

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    current_keyboard = callback_query.message.reply_markup.inline_keyboard

    if callback_query.data in SubjectsList:
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å
        button_index = None

        for i, row in enumerate(current_keyboard):
            for j, button in enumerate(row):
                if button.callback_data == callback_query.data:
                    button_index = (i, j)
                    break

        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è—è —ç–º–æ–¥–∂–∏
        if button_index is not None:
            if " ‚úÖ" in current_keyboard[button_index[0]][button_index[1]].text:
                current_keyboard[button_index[0]][button_index[1]].text =\
                    callback_query.data.replace(" ‚úÖ", "")
            else:
                current_keyboard[button_index[0]][button_index[1]].text =\
                    callback_query.data + " ‚úÖ"

        if current_keyboard[-1][0].text != '–ü–û–ô–î–ï–ú –î–ê–õ–¨–®–ï ‚û°Ô∏è':
            callback_query.message.reply_markup.add(
                InlineKeyboardButton('–ü–û–ô–î–ï–ú –î–ê–õ–¨–®–ï ‚û°Ô∏è',
                                     callback_data='–î–∞–ª–µ–µ1'))
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=current_keyboard)
        )
    elif callback_query.data == "–î–∞–ª–µ–µ1":
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        objects = [k[:-2] for k in list(map(lambda x: x[0].text,
                                            current_keyboard)) if "‚úÖ" in k]
        _temp.append(objects)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        await bot.send_message(
            callback_query.from_user.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üïì',
            reply_markup=keyboardTimeZone
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞–¥–∏—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        state = dp.current_state(user=callback_query.from_user.id)
        await state.set_state(BotStates.GET_TIMEZONE_STATE.state)


@dp.callback_query_handler(state=BotStates.GET_TIMEZONE_STATE)
async def get_timezone(callback_query: types.CallbackQuery):
    global _temp

    _temp.append(callback_query.data)

    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=None  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    try:
        # --- –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î ---
        query = f"""INSERT INTO UsersInfo (tg_id, type, class,
        subjects, timezone) VALUES (?, ?, ?, ?, ?)"""
        cursor.execute(query, (user_msg.from_user.id, "–£—á–µ–Ω–∏–∫",
                               _temp[0], ";".join(_temp[1]), _temp[2]))
        conn.commit()

        await bot.send_message(
            callback_query.from_user.id,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ü•≥"
            )
    except Exception:
        # sqlite3.IntegrityError
        await bot.send_message(
            callback_query.from_user.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ"
            )

    _temp = []
    await start(user_msg)


@dp.message_handler(state=BotStates.HOME_STATE)
async def main_menu(msg: types.Message):
    if msg.text == "/start":
        await start(msg)
    elif msg.text == "/help":
        await help(msg)
    elif msg.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéì':
        users_data = cursor.execute("""SELECT type, class, subjects,
                                    timeZone FROM UsersInfo WHERE tg_id=? """,
                                    (msg.from_user.id,)).fetchall()

        await bot.send_message(
            msg.from_user.id,
            "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è üéì\n\n" +
            f"üìä–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {users_data[0][0]}\n" +
            f"üë®‚Äçüéì–ö–ª–∞—Å—Å: {users_data[0][1]}\n" +
            f"üïì–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {users_data[0][3]}\n\n" +
            "üìö–ü—Ä–µ–¥–º–µ—Ç—ã:\n- " + '\n- '.join(users_data[0][2].split(";"))
            )

    elif msg.text == '–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ':
        delta = int(
            cursor.execute("""SELECT timezone
                           FROM UsersInfo WHERE tg_id=? AND type="–£—á–µ–Ω–∏–∫" """,
                           (msg.from_user.id, ))
            .fetchall()[0][0].split()[0][-2:])

        now_date = datetime.now(pytz.timezone("Europe/Moscow")) + \
            timedelta(hours=delta)
        day = now_date.strftime('%d.%m.%Y')

        dt = datetime.strptime(day, '%d.%m.%Y')
        start_date = dt - timedelta(days=dt.weekday())

        send_text = "–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é üìù\n"

        tt = {}

        has_schedule = False

        for i in range(7):
            new_date = start_date + timedelta(days=i)
            events = timetable_on_date(new_date.date(), cursor)

            wd = f"\n‚úÖ {new_date.date().strftime('%d.%m')} " +\
                f"({WEEKDAYS[new_date.weekday()]})\n"

            temp_output = ""

            for e in events:
                name, ts, te, cl = e
                ts = \
                    (datetime.strptime(e[1], "%H:%M") +
                        timedelta(hours=delta))\
                    .strftime("%H:%M")
                te = \
                    (datetime.strptime(e[2], "%H:%M") +
                        timedelta(hours=delta))\
                    .strftime("%H:%M")
                user_data = cursor.execute("""SELECT class, subjects FROM
                                           UsersInfo WHERE tg_id=?
                                           AND type="–£—á–µ–Ω–∏–∫" """,
                                           (msg.from_user.id, )).fetchall()[0]
                if user_data[0] in cl and name in user_data[1]:
                    temp_output += f"{' ' * 7}‚Ä¢ {name}\n{' ' * 10}" +\
                        f"–í—Ä–µ–º—è: {ts} - {te}\n\n"
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ has_schedule –≤ True,
                    # —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    has_schedule = True

            tt[wd] = temp_output[:-1]
        sep = "‚Äî" * 8
        if has_schedule:
            send_text += sep.join([e + tt[e] for e in tt if tt[e]])
        else:
            send_text = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –í–∞—Å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π!"

        await bot.send_message(msg.from_user.id, send_text)

    elif msg.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await bot.send_message(msg.from_user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                               reply_markup=settingsMenu)

    elif msg.text == '–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–∞ üîÑ':
        cursor.execute("""DELETE FROM usersInfo WHERE tg_id=?""",
                       (msg.from_user.id,))
        conn.commit()
        await start(user_msg)

    elif msg.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô':
        await bot.send_message(msg.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                               reply_markup=mainMenu)

    elif msg.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ùì":
        await bot.send_message(msg.from_user.id, HELP_TEXT)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
